// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import types "gitlab.bertha.cloud/partitio/Nextcloud-Partitio/gonextcloud/types"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// Apps provides a mock function with given fields:
func (_m *Client) Apps() types.Apps {
	ret := _m.Called()

	var r0 types.Apps
	if rf, ok := ret.Get(0).(func() types.Apps); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Apps)
		}
	}

	return r0
}

// AppsConfig provides a mock function with given fields:
func (_m *Client) AppsConfig() types.AppsConfig {
	ret := _m.Called()

	var r0 types.AppsConfig
	if rf, ok := ret.Get(0).(func() types.AppsConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.AppsConfig)
		}
	}

	return r0
}

// GroupFolders provides a mock function with given fields:
func (_m *Client) GroupFolders() types.GroupFolders {
	ret := _m.Called()

	var r0 types.GroupFolders
	if rf, ok := ret.Get(0).(func() types.GroupFolders); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.GroupFolders)
		}
	}

	return r0
}

// Groups provides a mock function with given fields:
func (_m *Client) Groups() types.Groups {
	ret := _m.Called()

	var r0 types.Groups
	if rf, ok := ret.Get(0).(func() types.Groups); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Groups)
		}
	}

	return r0
}

// Login provides a mock function with given fields: username, password
func (_m *Client) Login(username string, password string) error {
	ret := _m.Called(username, password)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(username, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logout provides a mock function with given fields:
func (_m *Client) Logout() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Notifications provides a mock function with given fields:
func (_m *Client) Notifications() types.Notifications {
	ret := _m.Called()

	var r0 types.Notifications
	if rf, ok := ret.Get(0).(func() types.Notifications); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Notifications)
		}
	}

	return r0
}

// Shares provides a mock function with given fields:
func (_m *Client) Shares() types.Shares {
	ret := _m.Called()

	var r0 types.Shares
	if rf, ok := ret.Get(0).(func() types.Shares); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Shares)
		}
	}

	return r0
}

// Users provides a mock function with given fields:
func (_m *Client) Users() types.Users {
	ret := _m.Called()

	var r0 types.Users
	if rf, ok := ret.Get(0).(func() types.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Users)
		}
	}

	return r0
}
